import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewEncapsulation } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { NgxMatTimepickerService } from "../../services/ngx-mat-timepicker.service";
import { NgxMatTimepickerPeriods } from "../../models/ngx-mat-timepicker-periods.enum";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import { Subject } from "rxjs";
import { distinctUntilChanged, map, takeUntil, tap } from "rxjs/operators";
import * as i0 from "@angular/core";
import * as i1 from "../../services/ngx-mat-timepicker.service";
import * as i2 from "../../services/ngx-mat-timepicker-locale.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/material/form-field";
import * as i6 from "@angular/material/select";
import * as i7 from "@angular/material/core";
import * as i8 from "@angular/material/icon";
import * as i9 from "../ngx-mat-timepicker/ngx-mat-timepicker.component";
import * as i10 from "../ngx-mat-timepicker-toggle/ngx-mat-timepicker-toggle.component";
import * as i11 from "../../directives/ngx-mat-timepicker-toggle-icon.directive";
import * as i12 from "../ngx-mat-timepicker-control/ngx-mat-timepicker-control.component";
export class NgxMatTimepickerFieldComponent {
    constructor(_timepickerService, _timepickerLocaleSrv) {
        this._timepickerService = _timepickerService;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this.maxHour = 12;
        this.minHour = 1;
        this.period = NgxMatTimepickerPeriods.AM;
        this.periods = [
            NgxMatTimepickerPeriods.AM,
            NgxMatTimepickerPeriods.PM
        ];
        this.timeChanged = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
        this._color = "primary";
        this._floatLabel = "auto";
        this._format = 12;
        this._isFirstTimeChange = true;
        this._subsCtrl$ = new Subject();
        this._onChange = () => {
        };
    }
    get color() {
        return this._color;
    }
    set color(newValue) {
        this._color = newValue;
    }
    get defaultTime() {
        return this._defaultTime;
    }
    set defaultTime(val) {
        this._defaultTime = val;
        this._isDefaultTime = !!val;
    }
    get floatLabel() {
        return this._floatLabel;
    }
    set floatLabel(newValue) {
        this._floatLabel = newValue;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        this._format = NgxMatTimepickerAdapter.isTwentyFour(value) ? 24 : 12;
        this.minHour = this._format === 12 ? 1 : 0;
        this.maxHour = this._format === 12 ? 12 : 23;
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this._updateTime(this.timepickerTime);
        }
        this._previousFormat = this._format;
    }
    get max() {
        return this._max;
    }
    set max(value) {
        if (typeof value === "string") {
            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._max = value;
    }
    get min() {
        return this._min;
    }
    set min(value) {
        if (typeof value === "string") {
            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._min = value;
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    changeHour(hour) {
        this._timepickerService.hour = this.hoursList.find(h => h.time === hour);
        this._changeTime();
    }
    changeMinute(minute) {
        this._timepickerService.minute = this.minutesList.find(m => m.time === minute);
        this._changeTime();
    }
    changePeriod(event) {
        this._timepickerService.period = event.value;
        this._changeTime();
    }
    ngOnDestroy() {
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    ngOnInit() {
        this._initTime(this.defaultTime);
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
        this.minutesList = NgxMatTimepickerUtils.getMinutes();
        this.isTimeRangeSet = !!(this.min || this.max);
        this.hour$ = this._timepickerService.selectedHour.pipe(tap((clockTime) => this._selectedHour = clockTime?.time), map(this._changeDefaultTimeValue.bind(this)), tap(() => this.isTimeRangeSet && this._updateAvailableMinutes()));
        this.minute$ = this._timepickerService.selectedMinute.pipe(map(this._changeDefaultTimeValue.bind(this)), tap(() => this._isFirstTimeChange = false));
        if (this.format === 12) {
            this._timepickerService.selectedPeriod.pipe(distinctUntilChanged(), tap((period) => this.period = period), tap(period => this.isChangePeriodDisabled = this._isPeriodDisabled(period)), takeUntil(this._subsCtrl$)).subscribe(() => this.isTimeRangeSet && this._updateAvailableTime());
        }
    }
    onTimeSet(time) {
        this._updateTime(time);
        this._emitLocalTimeChange(time);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(_fn_) {
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    writeValue(val) {
        if (val) {
            this._initTime(val);
        }
        else {
            this._resetTime();
        }
    }
    _changeDefaultTimeValue(clockFaceTime) {
        if (!this._isDefaultTime && this._isFirstTimeChange) {
            return { ...clockFaceTime, time: null };
        }
        return clockFaceTime;
    }
    _changeTime() {
        const time = this._timepickerService.getFullTime(this.format);
        this.timepickerTime = time;
        this._emitLocalTimeChange(time);
    }
    _emitLocalTimeChange(time) {
        const localTime = NgxMatTimepickerAdapter.toLocaleTimeString(time, { format: this.format, locale: this._locale });
        this._onChange(localTime);
        this.timeChanged.emit(localTime);
    }
    _initTime(time) {
        const isDefaultTimeAvailable = NgxMatTimepickerAdapter
            .isTimeAvailable(time, this.min, this.max, "minutes", null, this.format);
        if (!isDefaultTimeAvailable) {
            if (this.min) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.min, this.format));
                return;
            }
            if (this.max) {
                this._updateTime(NgxMatTimepickerAdapter.fromDateTimeToString(this.max, this.format));
                return;
            }
        }
        this._updateTime(time);
    }
    _isPeriodDisabled(period) {
        return NgxMatTimepickerUtils.disableHours(NgxMatTimepickerUtils.getHours(12), {
            min: this.min,
            max: this.max,
            format: 12,
            period: period === NgxMatTimepickerPeriods.AM ? NgxMatTimepickerPeriods.PM : NgxMatTimepickerPeriods.AM
        }).every(time => time.disabled);
    }
    _resetTime() {
        this._timepickerService.hour = { angle: 0, time: null };
        this._timepickerService.minute = { angle: 0, time: null };
    }
    _updateAvailableHours() {
        this.hoursList = NgxMatTimepickerUtils.disableHours(this.hoursList, {
            min: this.min,
            max: this.max,
            format: this.format,
            period: this.period
        });
    }
    _updateAvailableMinutes() {
        this.minutesList = NgxMatTimepickerUtils.disableMinutes(this.minutesList, this._selectedHour, {
            min: this.min,
            max: this.max,
            format: this.format,
            period: this.period
        });
    }
    _updateAvailableTime() {
        this._updateAvailableHours();
        if (this._selectedHour) {
            this._updateAvailableMinutes();
        }
    }
    _updateTime(time) {
        if (time) {
            const formattedTime = NgxMatTimepickerAdapter.formatTime(time, { locale: this._locale, format: this.format });
            this._timepickerService.setDefaultTimeIfAvailable(formattedTime, this.min, this.max, this.format);
            this.timepickerTime = formattedTime;
        }
    }
}
NgxMatTimepickerFieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerFieldComponent, deps: [{ token: i1.NgxMatTimepickerService }, { token: i2.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Component });
NgxMatTimepickerFieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: NgxMatTimepickerFieldComponent, selector: "ngx-mat-timepicker-field", inputs: { color: "color", defaultTime: "defaultTime", floatLabel: "floatLabel", format: "format", max: "max", min: "min", cancelBtnTmpl: "cancelBtnTmpl", confirmBtnTmpl: "confirmBtnTmpl", controlOnly: "controlOnly", disabled: "disabled", toggleIcon: "toggleIcon" }, outputs: { timeChanged: "timeChanged" }, providers: [
        NgxMatTimepickerService,
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: NgxMatTimepickerFieldComponent,
            multi: true
        }
    ], ngImport: i0, template: "<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"(hour$ | async)?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"(minute$ | async)?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    *ngIf=\"format !== 24\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n", styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i5.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "component", type: i6.MatSelect, selector: "mat-select", inputs: ["disabled", "disableRipple", "tabIndex"], exportAs: ["matSelect"] }, { kind: "component", type: i7.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "component", type: i8.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i9.NgxMatTimepickerComponent, selector: "ngx-mat-timepicker", inputs: ["appendToInput", "color", "enableKeyboardInput", "format", "minutesGap", "cancelBtnTmpl", "confirmBtnTmpl", "defaultTime", "disableAnimation", "editableHintTmpl", "hoursOnly", "isEsc", "max", "min", "preventOverlayClick", "timepickerClass"], outputs: ["closed", "hourSelected", "opened", "timeChanged", "timeSet"] }, { kind: "component", type: i10.NgxMatTimepickerToggleComponent, selector: "ngx-mat-timepicker-toggle", inputs: ["disabled", "for"] }, { kind: "directive", type: i11.NgxMatTimepickerToggleIconDirective, selector: "[ngxMatTimepickerToggleIcon]" }, { kind: "component", type: i12.NgxMatTimepickerControlComponent, selector: "ngx-mat-timepicker-time-control", inputs: ["color", "disabled", "floatLabel", "max", "min", "placeholder", "preventTyping", "time", "timeList", "timeUnit"], outputs: ["timeChanged"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-field", providers: [
                        NgxMatTimepickerService,
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerFieldComponent,
                            multi: true
                        }
                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<div class=\"ngx-mat-timepicker\"\r\n     [ngClass]=\"{'ngx-mat-timepicker--disabled': disabled}\">\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--first\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'HH'\"\r\n            [time]=\"(hour$ | async)?.time\"\r\n            [min]=\"minHour\"\r\n            [max]=\"maxHour\"\r\n            [timeUnit]=\"timeUnit.HOUR\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"hoursList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeHour($event)\"></ngx-mat-timepicker-time-control>\r\n    <span class=\"separator-colon ngx-mat-timepicker__control--second\">:</span>\r\n    <ngx-mat-timepicker-time-control\r\n            class=\"ngx-mat-timepicker__control--third\"\r\n            [color]=\"color\"\r\n            [floatLabel]=\"floatLabel\"\r\n            [placeholder]=\"'MM'\"\r\n            [time]=\"(minute$ | async)?.time\"\r\n            [min]=\"0\"\r\n            [max]=\"59\"\r\n            [timeUnit]=\"timeUnit.MINUTE\"\r\n            [disabled]=\"disabled\"\r\n            [timeList]=\"minutesList\"\r\n            [preventTyping]=\"isTimeRangeSet\"\r\n            (timeChanged)=\"changeMinute($event)\"></ngx-mat-timepicker-time-control>\r\n    <mat-form-field class=\"period-select ngx-mat-timepicker__control--forth\"\r\n                    *ngIf=\"format !== 24\"\r\n                    [color]=\"color\">\r\n        <mat-select [disabled]=\"disabled || isChangePeriodDisabled\"\r\n                    (selectionChange)=\"changePeriod($event)\"\r\n                    [ngModel]=\"period\">\r\n            <mat-option *ngFor=\"let option of periods\"\r\n                        [value]=\"option\">{{option}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n    <ngx-mat-timepicker-toggle\r\n            class=\"ngx-mat-timepicker__toggle\"\r\n            *ngIf=\"!controlOnly\"\r\n            [for]=\"timepicker\"\r\n            [disabled]=\"disabled\">\r\n        <span ngxMatTimepickerToggleIcon>\r\n            <ng-container *ngTemplateOutlet=\"toggleIcon || defaultIcon\"></ng-container>\r\n        </span>\r\n    </ngx-mat-timepicker-toggle>\r\n</div>\r\n<ngx-mat-timepicker\r\n        [color]=\"color\"\r\n        [min]=\"min\"\r\n        [max]=\"max\"\r\n        [defaultTime]=\"timepickerTime\"\r\n        [format]=\"format\"\r\n        [cancelBtnTmpl]=\"cancelBtnTmpl\"\r\n        [confirmBtnTmpl]=\"confirmBtnTmpl\"\r\n        (timeSet)=\"onTimeSet($event)\"\r\n        #timepicker></ngx-mat-timepicker>\r\n\r\n<ng-template #defaultIcon>\r\n    <mat-icon>watch_later</mat-icon>\r\n</ng-template>\r\n", styles: [".ngx-mat-timepicker{display:flex;align-items:center;height:100%}.ngx-mat-timepicker--disabled{background:rgba(0,0,0,.07);pointer-events:none}.ngx-mat-timepicker .separator-colon{margin-left:5px;margin-right:5px}.ngx-mat-timepicker .period-select{width:60px;min-width:60px;margin-left:8px;text-align:center}.ngx-mat-timepicker__control--first{order:1}.ngx-mat-timepicker__control--second{order:2}.ngx-mat-timepicker__control--third{order:3}.ngx-mat-timepicker__control--forth{order:4}.ngx-mat-timepicker__toggle{order:4;margin-bottom:1.5em;margin-left:4px}.ngx-mat-timepicker__toggle span.mat-button-wrapper{font-size:24px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.NgxMatTimepickerService }, { type: i2.NgxMatTimepickerLocaleService }]; }, propDecorators: { color: [{
                type: Input
            }], defaultTime: [{
                type: Input
            }], floatLabel: [{
                type: Input
            }], format: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], cancelBtnTmpl: [{
                type: Input
            }], confirmBtnTmpl: [{
                type: Input
            }], controlOnly: [{
                type: Input
            }], disabled: [{
                type: Input
            }], timeChanged: [{
                type: Output
            }], toggleIcon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,