import { Component, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerParserPipe } from "../../pipes/ngx-mat-timepicker-parser.pipe";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import * as i0 from "@angular/core";
import * as i1 from "../../pipes/ngx-mat-timepicker-parser.pipe";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../../directives/ngx-mat-timepicker-autofocus.directive";
import * as i5 from "../../pipes/ngx-mat-timepicker-time-localizer.pipe";
function retainSelection() {
    this.selectionStart = this.selectionEnd;
}
export class NgxMatTimepickerDialControlComponent {
    constructor(_elRef, _timeParserPipe) {
        this._elRef = _elRef;
        this._timeParserPipe = _timeParserPipe;
        this.focused = new EventEmitter();
        this.timeChanged = new EventEmitter();
        this.timeUnitChanged = new EventEmitter();
        this.unfocused = new EventEmitter();
    }
    get _selectedTime() {
        if (!!this.time) {
            return this.timeList.find(t => t.time === +this.time);
        }
        return undefined;
    }
    changeTimeByKeyboard(e) {
        const char = String.fromCharCode(e.keyCode);
        if (isTimeDisabledToChange(this.time, char, this.timeList)) {
            e.preventDefault();
        }
    }
    ngAfterViewInit() {
        this._elRef.nativeElement.querySelector("input").addEventListener("select", retainSelection, false);
    }
    ngOnDestroy() {
        this._elRef.nativeElement.querySelector("input").removeEventListener("select", retainSelection);
    }
    onKeydown(e) {
        if (!NgxMatTimepickerUtils.isDigit(e)) {
            e.preventDefault();
        }
        else {
            this._changeTimeByArrow(e.keyCode);
        }
    }
    onModelChange(value) {
        this.time = this._timeParserPipe.transform(value, this.timeUnit);
    }
    saveTimeAndChangeTimeUnit(event, unit) {
        event.preventDefault();
        this.previousTime = this.time;
        this.timeUnitChanged.next(unit);
        this.focused.next();
    }
    updateTime() {
        if (this._selectedTime) {
            this.timeChanged.next(this._selectedTime);
            this.previousTime = this._selectedTime.time;
        }
    }
    _addTime(amount) {
        return `0${+this.time + amount}`.substr(-2);
    }
    _changeTimeByArrow(keyCode) {
        let time;
        // arrow up
        if (keyCode === 38) {
            time = this._addTime(this.minutesGap || 1);
        }
        // arrow down
        else if (keyCode === 40) {
            time = this._addTime(-1 * (this.minutesGap || 1));
        }
        if (!isTimeUnavailable(time, this.timeList)) {
            this.time = time;
            this.updateTime();
        }
    }
}
NgxMatTimepickerDialControlComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerDialControlComponent, deps: [{ token: i0.ElementRef }, { token: i1.NgxMatTimepickerParserPipe }], target: i0.ɵɵFactoryTarget.Component });
NgxMatTimepickerDialControlComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: NgxMatTimepickerDialControlComponent, selector: "ngx-mat-timepicker-dial-control", inputs: { disabled: "disabled", isActive: "isActive", isEditable: "isEditable", minutesGap: "minutesGap", time: "time", timeList: "timeList", timeUnit: "timeUnit" }, outputs: { focused: "focused", timeChanged: "timeChanged", timeUnitChanged: "timeUnitChanged", unfocused: "unfocused" }, providers: [NgxMatTimepickerParserPipe], ngImport: i0, template: "<input class=\"timepicker-dial__control timepicker-dial__item\"\r\n       [ngClass]=\"{'active': isActive}\"\r\n       [ngModel]=\"time | timeLocalizer: timeUnit: true\"\r\n       (ngModelChange)=\"time = $event\"\r\n       [disabled]=\"disabled\"\r\n       (input)=\"updateTime()\"\r\n       (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n       readonly\r\n       [ngxMatTimepickerAutofocus]=\"isActive\"\r\n       *ngIf=\"!isEditable;else editableTemplate\">\r\n\r\n<ng-template #editableTemplate>\r\n    <input class=\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\"\r\n           [ngClass]=\"{'active': isActive}\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [disabled]=\"disabled\"\r\n           (input)=\"updateTime()\"\r\n           (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n           [ngxMatTimepickerAutofocus]=\"isActive\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTimeByKeyboard($event)\">\r\n</ng-template>\r\n", styles: [".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i4.NgxMatTimepickerAutofocusDirective, selector: "[ngxMatTimepickerAutofocus]", inputs: ["ngxMatTimepickerAutofocus"] }, { kind: "pipe", type: i1.NgxMatTimepickerParserPipe, name: "ngxMatTimepickerParser" }, { kind: "pipe", type: i5.NgxMatTimepickerTimeLocalizerPipe, name: "timeLocalizer" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerDialControlComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-dial-control", providers: [NgxMatTimepickerParserPipe], template: "<input class=\"timepicker-dial__control timepicker-dial__item\"\r\n       [ngClass]=\"{'active': isActive}\"\r\n       [ngModel]=\"time | timeLocalizer: timeUnit: true\"\r\n       (ngModelChange)=\"time = $event\"\r\n       [disabled]=\"disabled\"\r\n       (input)=\"updateTime()\"\r\n       (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n       readonly\r\n       [ngxMatTimepickerAutofocus]=\"isActive\"\r\n       *ngIf=\"!isEditable;else editableTemplate\">\r\n\r\n<ng-template #editableTemplate>\r\n    <input class=\"timepicker-dial__control timepicker-dial__item timepicker-dial__control_editable\"\r\n           [ngClass]=\"{'active': isActive}\"\r\n           [ngModel]=\"time | ngxMatTimepickerParser: timeUnit | timeLocalizer: timeUnit : true\"\r\n           (ngModelChange)=\"onModelChange($event)\"\r\n           [disabled]=\"disabled\"\r\n           (input)=\"updateTime()\"\r\n           (focus)=\"saveTimeAndChangeTimeUnit($event, timeUnit)\"\r\n           [ngxMatTimepickerAutofocus]=\"isActive\"\r\n           (keydown)=\"onKeydown($event)\"\r\n           (keypress)=\"changeTimeByKeyboard($event)\">\r\n</ng-template>\r\n", styles: [".timepicker-dial__control{border:none;background-color:transparent;font-size:50px;width:60px;padding:0;border-radius:3px;text-align:center;color:inherit}.timepicker-dial__control:focus{outline:none;background-color:#0000001a}.timepicker-dial__control:disabled{cursor:default}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxMatTimepickerParserPipe }]; }, propDecorators: { disabled: [{
                type: Input
            }], focused: [{
                type: Output
            }], isActive: [{
                type: Input
            }], isEditable: [{
                type: Input
            }], minutesGap: [{
                type: Input
            }], time: [{
                type: Input
            }], timeChanged: [{
                type: Output
            }], timeList: [{
                type: Input
            }], timeUnit: [{
                type: Input
            }], timeUnitChanged: [{
                type: Output
            }], unfocused: [{
                type: Output
            }] } });
function isTimeDisabledToChange(currentTime, nextTime, timeList) {
    const isNumber = /\d/.test(nextTime);
    if (isNumber) {
        const time = currentTime + nextTime;
        return isTimeUnavailable(time, timeList);
    }
    return undefined;
}
function isTimeUnavailable(time, timeList) {
    const selectedTime = timeList.find(value => value.time === +time);
    return !selectedTime || (selectedTime && selectedTime.disabled);
}
//# sourceMappingURL=data:application/json;base64,