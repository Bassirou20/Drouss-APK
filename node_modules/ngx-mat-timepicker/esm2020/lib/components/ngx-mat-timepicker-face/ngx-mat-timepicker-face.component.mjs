import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { NgxMatTimepickerUnits } from "../../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerAdapter } from "../../services/ngx-mat-timepicker-adapter";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/material/button";
import * as i3 from "@angular/material/toolbar";
import * as i4 from "../../pipes/ngx-mat-timepicker-active-hour.pipe";
import * as i5 from "../../pipes/ngx-mat-timepicker-active-minute.pipe";
import * as i6 from "../../pipes/ngx-mat-timepicker-minutes-formatter.pipe";
import * as i7 from "../../pipes/ngx-mat-timepicker-time-localizer.pipe";
function roundAngle(angle, step) {
    return Math.round(angle / step) * step;
}
function countAngleByCords(x0, y0, x, y, currentAngle) {
    if (y > y0 && x >= x0) { // II quarter
        return 180 - currentAngle;
    }
    else if (y > y0 && x < x0) { // III quarter
        return 180 + currentAngle;
    }
    else if (y < y0 && x < x0) { // IV quarter
        return 360 - currentAngle;
    }
    else { // I quarter
        return currentAngle;
    }
}
const CLOCK_HAND_STYLES = {
    small: {
        height: "75px",
        top: "calc(50% - 75px)"
    },
    large: {
        height: "103px",
        top: "calc(50% - 103px)"
    }
};
export class NgxMatTimepickerFaceComponent {
    constructor() {
        this.color = "primary";
        this.innerClockFaceSize = 85;
        this.timeChange = new EventEmitter();
        this.timeSelected = new EventEmitter();
        this.timeUnit = NgxMatTimepickerUnits;
    }
    ngAfterViewInit() {
        this._setClockHandPosition();
        this._addTouchEvents();
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        const faceTimeChanges = changes["faceTime"];
        // tslint:disable-next-line:no-string-literal
        const selectedTimeChanges = changes["selectedTime"];
        if ((faceTimeChanges && faceTimeChanges.currentValue)
            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {
            /* Set time according to pass an input value */
            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);
        }
        if (selectedTimeChanges && selectedTimeChanges.currentValue) {
            this._setClockHandPosition();
        }
        if (faceTimeChanges && faceTimeChanges.currentValue) {
            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError
            setTimeout(() => this._selectAvailableTime());
        }
    }
    ngOnDestroy() {
        this._removeTouchEvents();
    }
    onMousedown(e) {
        e.preventDefault();
        this._isStarted = true;
    }
    onMouseup(e) {
        e.preventDefault();
        this._isStarted = false;
    }
    selectTime(e) {
        if (!this._isStarted && (e instanceof MouseEvent && e.type !== "click")) {
            return;
        }
        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();
        /* Get x0 and y0 of the circle */
        const centerX = clockFaceCords.left + clockFaceCords.width / 2;
        const centerY = clockFaceCords.top + clockFaceCords.height / 2;
        /* Counting the arctangent and convert it to from radian to deg */
        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;
        /* Get angle according to quadrant */
        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);
        /* Check if selected time from the inner clock face (24 hours format only) */
        const isInnerClockChosen = this.format && this._isInnerClockFace(centerX, centerY, e.clientX, e.clientY);
        /* Round angle according to angle step */
        const angleStep = this.unit === NgxMatTimepickerUnits.MINUTE ? (6 * (this.minutesGap || 1)) : 30;
        const roundedAngle = roundAngle(circleAngle, angleStep);
        const angle = (roundedAngle || 360) + (isInnerClockChosen ? 360 : 0);
        const selectedTime = this.faceTime.find(val => val.angle === angle);
        if (selectedTime && !selectedTime.disabled) {
            this.timeChange.next(selectedTime);
            /* To let know whether user ended interaction with clock face */
            if (!this._isStarted) {
                this.timeSelected.next(selectedTime.time);
            }
        }
    }
    trackByTime(_item_, time) {
        return time.time;
    }
    _addTouchEvents() {
        this._touchStartHandler = this.onMousedown.bind(this);
        this._touchEndHandler = this.onMouseup.bind(this);
        this.clockFace.nativeElement.addEventListener("touchstart", this._touchStartHandler);
        this.clockFace.nativeElement.addEventListener("touchend", this._touchEndHandler);
    }
    _decreaseClockHand() {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;
    }
    _increaseClockHand() {
        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;
        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;
    }
    _isInnerClockFace(x0, y0, x, y) {
        /* Detect whether time from the inner clock face or not (24 format only) */
        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;
    }
    _removeTouchEvents() {
        this.clockFace.nativeElement.removeEventListener("touchstart", this._touchStartHandler);
        this.clockFace.nativeElement.removeEventListener("touchend", this._touchEndHandler);
    }
    _selectAvailableTime() {
        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);
        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);
        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {
            const availableTime = this.faceTime.find(time => !time.disabled);
            this.timeChange.next(availableTime);
        }
    }
    _setClockHandPosition() {
        if (NgxMatTimepickerAdapter.isTwentyFour(this.format)) {
            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {
                this._decreaseClockHand();
            }
            else {
                this._increaseClockHand();
            }
        }
        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;
    }
}
NgxMatTimepickerFaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerFaceComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NgxMatTimepickerFaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: NgxMatTimepickerFaceComponent, selector: "ngx-mat-timepicker-face", inputs: { color: "color", faceTime: "faceTime", format: "format", minutesGap: "minutesGap", selectedTime: "selectedTime", unit: "unit" }, outputs: { timeChange: "timeChange", timeSelected: "timeSelected" }, host: { listeners: { "mousedown": "onMousedown($event)", "mouseup": "onMouseup($event)", "click": "selectTime($event)", "touchmove": "selectTime($event.changedTouches[0])", "touchend": "selectTime($event.changedTouches[0])", "mousemove": "selectTime($event)" } }, viewQueries: [{ propertyName: "clockFace", first: true, predicate: ["clockFace"], descendants: true, static: true }, { propertyName: "clockHand", first: true, predicate: ["clockHand"], descendants: true, read: ElementRef, static: true }], usesOnChanges: true, ngImport: i0, template: "<!-- DEFAULT TEMPLATES - START -->\r\n<ng-template #hourButton\r\n             let-time>\r\n    <button mat-mini-fab\r\n            disableRipple\r\n            class=\"mat-elevation-z0\"\r\n            [color]=\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\"\r\n            [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n            [disabled]=\"time.disabled\">\r\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\r\n    </button>\r\n</ng-template>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n            <button mat-mini-fab\r\n                    disableRipple\r\n                    class=\"mat-elevation-z0\"\r\n                    [color]=\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\"\r\n                    [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n                    [disabled]=\"time.disabled\">\r\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<!-- DEFAULT TEMPLATES - END -->\r\n<div class=\"clock-face\"\r\n     #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\"\r\n         class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\">\r\n            <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n        </div>\r\n        <div class=\"clock-face__inner\"\r\n             *ngIf=\"faceTime.length > 12\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\"\r\n                 [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\">\r\n                <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <mat-toolbar class=\"clock-face__clock-hand\"\r\n                 [color]=\"color\"\r\n                 [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n                 #clockHand\r\n                 [hidden]=\"isClockFaceDisabled\">\r\n        <button mat-mini-fab\r\n                *ngIf=\"unit === timeUnit.MINUTE\"\r\n                [color]=\"color\">\r\n            <span class=\"clock-face__clock-hand_minute_dot\"></span>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-toolbar class=\"clock-face__center\"\r\n                 [color]=\"color\"></mat-toolbar>\r\n</div>\r\n", styles: ["ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: i2.MatMiniFabButton, selector: "button[mat-mini-fab]", inputs: ["disabled", "disableRipple", "color"], exportAs: ["matButton"] }, { kind: "component", type: i3.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "pipe", type: i1.SlicePipe, name: "slice" }, { kind: "pipe", type: i4.NgxMatTimepickerActiveHourPipe, name: "activeHour" }, { kind: "pipe", type: i5.NgxMatTimepickerActiveMinutePipe, name: "activeMinute" }, { kind: "pipe", type: i6.NgxMatTimepickerMinutesFormatterPipe, name: "minutesFormatter" }, { kind: "pipe", type: i7.NgxMatTimepickerTimeLocalizerPipe, name: "timeLocalizer" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerFaceComponent, decorators: [{
            type: Component,
            args: [{ selector: "ngx-mat-timepicker-face", changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<!-- DEFAULT TEMPLATES - START -->\r\n<ng-template #hourButton\r\n             let-time>\r\n    <button mat-mini-fab\r\n            disableRipple\r\n            class=\"mat-elevation-z0\"\r\n            [color]=\"(time.time | activeHour: selectedTime?.time : isClockFaceDisabled) ? color : undefined\"\r\n            [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n            [disabled]=\"time.disabled\">\r\n        {{time.time | timeLocalizer: timeUnit.HOUR}}\r\n    </button>\r\n</ng-template>\r\n<ng-template #minutesFace>\r\n    <div class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime; trackBy: trackByTime\">\r\n            <button mat-mini-fab\r\n                    disableRipple\r\n                    class=\"mat-elevation-z0\"\r\n                    [color]=\"(time.time | activeMinute: selectedTime?.time:minutesGap:isClockFaceDisabled) ? color : undefined\"\r\n                    [ngStyle]=\"{'transform': 'rotateZ(-'+ time.angle +'deg)'}\"\r\n                    [disabled]=\"time.disabled\">\r\n                {{time.time | minutesFormatter: minutesGap | timeLocalizer: timeUnit.MINUTE}}\r\n            </button>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n<!-- DEFAULT TEMPLATES - END -->\r\n<div class=\"clock-face\"\r\n     #clockFace>\r\n    <div *ngIf=\"unit !== timeUnit.MINUTE;else minutesFace\"\r\n         class=\"clock-face__container\">\r\n        <div class=\"clock-face__number clock-face__number--outer\"\r\n             [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n             *ngFor=\"let time of faceTime | slice: 0 : 12; trackBy: trackByTime\">\r\n            <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n        </div>\r\n        <div class=\"clock-face__inner\"\r\n             *ngIf=\"faceTime.length > 12\">\r\n            <div class=\"clock-face__number clock-face__number--inner\"\r\n                 [style.top]=\"'calc(50% - ' + innerClockFaceSize + 'px)'\"\r\n                 [ngStyle]=\"{'transform': 'rotateZ('+ time.angle +'deg)'}\"\r\n                 [style.height.px]=\"innerClockFaceSize\"\r\n                 *ngFor=\"let time of faceTime | slice: 12 : 24; trackBy: trackByTime\">\r\n                <ng-content *ngTemplateOutlet=\"hourButton; context: {$implicit: time}\"></ng-content>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <mat-toolbar class=\"clock-face__clock-hand\"\r\n                 [color]=\"color\"\r\n                 [ngClass]=\"{'clock-face__clock-hand_minute': unit === timeUnit.MINUTE}\"\r\n                 #clockHand\r\n                 [hidden]=\"isClockFaceDisabled\">\r\n        <button mat-mini-fab\r\n                *ngIf=\"unit === timeUnit.MINUTE\"\r\n                [color]=\"color\">\r\n            <span class=\"clock-face__clock-hand_minute_dot\"></span>\r\n        </button>\r\n    </mat-toolbar>\r\n    <mat-toolbar class=\"clock-face__center\"\r\n                 [color]=\"color\"></mat-toolbar>\r\n</div>\r\n", styles: ["ngx-mat-timepicker-face .clock-face{width:290px;height:290px;border-radius:50%;position:relative;display:flex;justify-content:center;box-sizing:border-box;background-color:#c8c8c880!important}ngx-mat-timepicker-face .clock-face__inner{position:absolute;top:0;left:0;width:100%;height:100%}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void{box-shadow:none;background-color:transparent}ngx-mat-timepicker-face .clock-face [mat-mini-fab].mat-void>span.mat-mdc-button-persistent-ripple{display:none}ngx-mat-timepicker-face .clock-face__container{margin-left:-2px}ngx-mat-timepicker-face .clock-face__number{position:absolute;transform-origin:25px 100%;width:50px;text-align:center;z-index:2;top:calc(50% - 125px);left:calc(50% - 25px)}ngx-mat-timepicker-face .clock-face__number--outer{height:125px}ngx-mat-timepicker-face .clock-face__number--outer>span{font-size:16px}ngx-mat-timepicker-face .clock-face__number--inner>span{font-size:14px}ngx-mat-timepicker-face .clock-face__clock-hand{height:103px;width:2px;padding:0;transform-origin:1px 100%;position:absolute;top:calc(50% - 103px);z-index:1}ngx-mat-timepicker-face .clock-face__center{width:8px;height:8px;padding:0;position:absolute;border-radius:50%;top:50%;left:50%;margin:-4px}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button{position:absolute;top:-22px;left:calc(50% - 20px);box-sizing:content-box;display:flex;justify-content:center;align-items:center}ngx-mat-timepicker-face .clock-face__clock-hand_minute>button .clock-face__clock-hand_minute_dot{display:block;width:4px;height:4px;background:#FFF;border-radius:50%}@media (max-device-width: 1023px) and (orientation: landscape){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}@media screen and (max-width: 360px){ngx-mat-timepicker-face .clock-face{width:250px;height:250px}}\n"] }]
        }], propDecorators: { clockFace: [{
                type: ViewChild,
                args: ["clockFace", { static: true }]
            }], clockHand: [{
                type: ViewChild,
                args: ["clockHand", { static: true, read: ElementRef }]
            }], color: [{
                type: Input
            }], faceTime: [{
                type: Input
            }], format: [{
                type: Input
            }], minutesGap: [{
                type: Input
            }], selectedTime: [{
                type: Input
            }], timeChange: [{
                type: Output
            }], timeSelected: [{
                type: Output
            }], unit: [{
                type: Input
            }], onMousedown: [{
                type: HostListener,
                args: ["mousedown", ["$event"]]
            }], onMouseup: [{
                type: HostListener,
                args: ["mouseup", ["$event"]]
            }], selectTime: [{
                type: HostListener,
                args: ["click", ["$event"]]
            }, {
                type: HostListener,
                args: ["touchmove", ["$event.changedTouches[0]"]]
            }, {
                type: HostListener,
                args: ["touchend", ["$event.changedTouches[0]"]]
            }, {
                type: HostListener,
                args: ["mousemove", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,