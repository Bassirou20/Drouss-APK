import { Directive, EventEmitter, Input, Output } from "@angular/core";
import { NgxMatTimepickerUtils } from "../../utils/ngx-mat-timepicker.utils";
import * as i0 from "@angular/core";
export class NgxMatTimepickerHoursFaceDirective {
    constructor() {
        this.hourChange = new EventEmitter();
        this.hourSelected = new EventEmitter();
        this.hoursList = [];
        this._color = "primary";
        this._format = 24;
    }
    set color(newValue) {
        this._color = newValue;
    }
    get color() {
        return this._color;
    }
    set format(newValue) {
        this._format = newValue;
        this.hoursList = NgxMatTimepickerUtils.getHours(this._format);
    }
    get format() {
        return this._format;
    }
    onTimeSelected(time) {
        this.hourSelected.next(time);
    }
}
NgxMatTimepickerHoursFaceDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxMatTimepickerHoursFaceDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.1", type: NgxMatTimepickerHoursFaceDirective, selector: "[ngxMatTimepickerHoursFace]", inputs: { color: "color", format: "format", maxTime: "maxTime", minTime: "minTime", selectedHour: "selectedHour" }, outputs: { hourChange: "hourChange", hourSelected: "hourSelected" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerHoursFaceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepickerHoursFace]"
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { color: [{
                type: Input
            }], format: [{
                type: Input
            }], hourChange: [{
                type: Output
            }], hourSelected: [{
                type: Output
            }], maxTime: [{
                type: Input
            }], minTime: [{
                type: Input
            }], selectedHour: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLWhvdXJzLWZhY2UuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS9uZ3gtbWF0LXRpbWVwaWNrZXItaG91cnMtZmFjZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUtyRSxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQzs7QUFPM0UsTUFBTSxPQUFPLGtDQUFrQztJQWdDM0M7UUFYVSxlQUFVLEdBQUcsSUFBSSxZQUFZLEVBQTZCLENBQUM7UUFDM0QsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXBELGNBQVMsR0FBZ0MsRUFBRSxDQUFDO1FBS2xDLFdBQU0sR0FBaUIsU0FBUyxDQUFDO1FBQ2pDLFlBQU8sR0FBK0IsRUFBRSxDQUFDO0lBR25ELENBQUM7SUEvQkQsSUFDSSxLQUFLLENBQUMsUUFBc0I7UUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFDSSxNQUFNLENBQUMsUUFBb0M7UUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQWdCRCxjQUFjLENBQUMsSUFBWTtRQUN2QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOzsrSEFyQ1Esa0NBQWtDO21IQUFsQyxrQ0FBa0M7MkZBQWxDLGtDQUFrQztrQkFIOUMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO2lCQUMxQzswRUFJTyxLQUFLO3NCQURSLEtBQUs7Z0JBVUYsTUFBTTtzQkFEVCxLQUFLO2dCQVVJLFVBQVU7c0JBQW5CLE1BQU07Z0JBQ0csWUFBWTtzQkFBckIsTUFBTTtnQkFHRSxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csT0FBTztzQkFBZixLQUFLO2dCQUNHLFlBQVk7c0JBQXBCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQge1RoZW1lUGFsZXR0ZX0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2NvcmVcIjtcclxuLy9cclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ2xvY2tGYWNlfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1jbG9jay1mYWNlLmludGVyZmFjZVwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlfSBmcm9tIFwiLi4vLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1mb3JtYXQudHlwZVwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJVdGlsc30gZnJvbSBcIi4uLy4uL3V0aWxzL25neC1tYXQtdGltZXBpY2tlci51dGlsc1wiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tIFwidHMtbHV4b25cIjtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiW25neE1hdFRpbWVwaWNrZXJIb3Vyc0ZhY2VdXCJcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJIb3Vyc0ZhY2VEaXJlY3RpdmUge1xyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgY29sb3IobmV3VmFsdWU6IFRoZW1lUGFsZXR0ZSkge1xyXG4gICAgICAgIHRoaXMuX2NvbG9yID0gbmV3VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbG9yKCk6IFRoZW1lUGFsZXR0ZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgZm9ybWF0KG5ld1ZhbHVlOiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm1hdCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgIHRoaXMuaG91cnNMaXN0ID0gTmd4TWF0VGltZXBpY2tlclV0aWxzLmdldEhvdXJzKHRoaXMuX2Zvcm1hdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvcm1hdCgpOiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBAT3V0cHV0KCkgaG91ckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Tmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZT4oKTtcclxuICAgIEBPdXRwdXQoKSBob3VyU2VsZWN0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPG51bWJlcj4oKTtcclxuXHJcbiAgICBob3Vyc0xpc3Q6IE5neE1hdFRpbWVwaWNrZXJDbG9ja0ZhY2VbXSA9IFtdO1xyXG4gICAgQElucHV0KCkgbWF4VGltZTogRGF0ZVRpbWU7XHJcbiAgICBASW5wdXQoKSBtaW5UaW1lOiBEYXRlVGltZTtcclxuICAgIEBJbnB1dCgpIHNlbGVjdGVkSG91cjogTmd4TWF0VGltZXBpY2tlckNsb2NrRmFjZTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX2NvbG9yOiBUaGVtZVBhbGV0dGUgPSBcInByaW1hcnlcIjtcclxuICAgIHByb3RlY3RlZCBfZm9ybWF0OiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSA9IDI0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIG9uVGltZVNlbGVjdGVkKHRpbWU6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaG91clNlbGVjdGVkLm5leHQodGltZSk7XHJcbiAgICB9XHJcbn1cclxuIl19