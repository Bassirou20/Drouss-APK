import { Directive, HostListener, HostBinding, Inject, Input, Optional } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { CdkOverlayOrigin } from "@angular/cdk/overlay";
import { MatFormField } from "@angular/material/form-field";
import { NgxMatTimepickerAdapter } from "../services/ngx-mat-timepicker-adapter";
//
import { Subject, takeUntil } from "rxjs";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
import * as i2 from "@angular/material/form-field";
export class NgxMatTimepickerDirective {
    constructor(_elementRef, _timepickerLocaleSrv, _matFormField) {
        this._elementRef = _elementRef;
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this._matFormField = _matFormField;
        this.cdkOverlayOrigin = new CdkOverlayOrigin(this._matFormField ? this._matFormField.getConnectedOverlayOrigin() : this._elementRef);
        this._format = 12;
        this._subsCtrl$ = new Subject();
        this._value = "";
        this.onTouched = () => {
        };
        this._onChange = () => {
        };
    }
    get element() {
        return this._elementRef && this._elementRef.nativeElement;
    }
    get format() {
        return this._format;
    }
    set format(value) {
        this._format = NgxMatTimepickerAdapter.isTwentyFour(+value) ? 24 : 12;
        const isDynamicallyChanged = value && (this._previousFormat && this._previousFormat !== this._format);
        if (isDynamicallyChanged) {
            this.value = this._value;
            this._timepicker.updateTime(this._value);
        }
        this._previousFormat = this._format;
    }
    get max() {
        return this._max;
    }
    set max(value) {
        if (typeof value === "string") {
            this._max = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._max = value;
    }
    get min() {
        return this._min;
    }
    set min(value) {
        if (typeof value === "string") {
            this._min = NgxMatTimepickerAdapter.parseTime(value, { locale: this._locale, format: this.format });
            return;
        }
        this._min = value;
    }
    set timepicker(picker) {
        this._registerTimepicker(picker);
    }
    get value() {
        if (!this._value) {
            return "";
        }
        return NgxMatTimepickerAdapter.toLocaleTimeString(this._value, { format: this.format, locale: this._locale });
    }
    set value(value) {
        if (!value) {
            this._value = "";
            this._updateInputValue();
            return;
        }
        const time = NgxMatTimepickerAdapter.formatTime(value, { locale: this._locale, format: this.format });
        const isAvailable = NgxMatTimepickerAdapter.isTimeAvailable(time, this._min, this._max, "minutes", this._timepicker.minutesGap, this._format);
        if (isAvailable) {
            this._value = time;
            this._updateInputValue();
            return;
        }
        console.warn("Selected time doesn't match min or max value");
    }
    set _defaultTime(time) {
        this._timepicker.defaultTime = NgxMatTimepickerAdapter.formatTime(time, {
            locale: this._locale,
            format: this.format
        });
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    ngOnChanges(changes) {
        // tslint:disable-next-line:no-string-literal
        const vChanges = changes["value"];
        if (vChanges && vChanges.currentValue) {
            this._defaultTime = vChanges.currentValue;
        }
    }
    ngOnDestroy() {
        this._unregisterTimepicker();
        this._subsCtrl$.next();
        this._subsCtrl$.complete();
    }
    onClick(event) {
        if (!this.disableClick) {
            this._timepicker.open();
            event.stopPropagation();
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    updateValue(value) {
        this.value = value;
        this._onChange(value);
    }
    writeValue(value) {
        this.value = value;
        if (value) {
            this._defaultTime = value;
        }
    }
    _registerTimepicker(picker) {
        if (picker) {
            this._timepicker = picker;
            this._timepicker.registerInput(this);
            this._timepicker.timeSet
                .pipe(takeUntil(this._subsCtrl$))
                .subscribe((time) => {
                this.value = time;
                this._onChange(this.value);
                this.onTouched();
                this._defaultTime = this._value;
            });
        }
        else {
            throw new Error("NgxMatTimepickerComponent is not defined." +
                " Please make sure you passed the timepicker to ngxMatTimepicker directive");
        }
    }
    _unregisterTimepicker() {
        if (this._timepicker) {
            this._timepicker.unregisterInput();
        }
    }
    _updateInputValue() {
        this._elementRef.nativeElement.value = this.value;
    }
}
NgxMatTimepickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgxMatTimepickerLocaleService }, { token: MatFormField, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NgxMatTimepickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.1", type: NgxMatTimepickerDirective, selector: "[ngxMatTimepicker]", inputs: { format: "format", max: "max", min: "min", timepicker: ["ngxMatTimepicker", "timepicker"], value: "value", disableClick: "disableClick", disabled: "disabled" }, host: { listeners: { "blur": "onTouched()", "click": "onClick($event)", "change": "updateValue($event)" }, properties: { "disabled": "disabled", "attr.cdkOverlayOrigin": "this.cdkOverlayOrigin" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: NgxMatTimepickerDirective,
            multi: true
        }
    ], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[ngxMatTimepicker]",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: NgxMatTimepickerDirective,
                            multi: true
                        }
                    ],
                    // tslint:disable-next-line:no-host-metadata-property
                    host: {
                        "[disabled]": "disabled",
                        "(blur)": "onTouched()"
                    }
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgxMatTimepickerLocaleService }, { type: i2.MatFormField, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MatFormField]
                }] }]; }, propDecorators: { format: [{
                type: Input
            }], max: [{
                type: Input
            }], min: [{
                type: Input
            }], timepicker: [{
                type: Input,
                args: ["ngxMatTimepicker"]
            }], value: [{
                type: Input
            }], cdkOverlayOrigin: [{
                type: HostBinding,
                args: ["attr.cdkOverlayOrigin"]
            }], disableClick: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ["click", ["$event"]]
            }], updateValue: [{
                type: HostListener,
                args: ["change", ["$event"]]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXQtdGltZXBpY2tlci9zcmMvbGliL2RpcmVjdGl2ZXMvbmd4LW1hdC10aW1lcGlja2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFJTCxRQUFRLEVBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUF1QixpQkFBaUIsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUkxRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSx3Q0FBd0MsQ0FBQztBQUUvRSxFQUFFO0FBQ0YsT0FBTyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7QUFrQnhDLE1BQU0sT0FBTyx5QkFBeUI7SUFrSGxDLFlBQW9CLFdBQXVCLEVBQ3ZCLG9CQUFtRCxFQUNqQixhQUEyQjtRQUY3RCxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQUN2Qix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO1FBQ2pCLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBZjNDLHFCQUFnQixHQUNsRCxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBSXpHLFlBQU8sR0FBK0IsRUFBRSxDQUFDO1FBSXpDLGVBQVUsR0FBa0IsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUVoRCxXQUFN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QkFETixLQUFLO2dCQWVGLEdBQUc7c0JBRE4sS0FBSztnQkFXRixVQUFVO3NCQURiLEtBQUs7dUJBQUMsa0JBQWtCO2dCQWNyQixLQUFLO3NCQURSLEtBQUs7Z0JBc0NnQyxnQkFBZ0I7c0JBQXJELFdBQVc7dUJBQUMsdUJBQXVCO2dCQUUzQixZQUFZO3NCQUFwQixLQUFLO2dCQUNHLFFBQVE7c0JBQWhCLEtBQUs7Z0JBOEJOLE9BQU87c0JBRE4sWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBd0JqQyxXQUFXO3NCQURWLFlBQVk7dUJBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIERpcmVjdGl2ZSxcclxuICAgIEVsZW1lbnRSZWYsXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBIb3N0QmluZGluZyxcclxuICAgIEluamVjdCxcclxuICAgIElucHV0LFxyXG4gICAgT25DaGFuZ2VzLFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgU2ltcGxlQ2hhbmdlcyxcclxuICAgIE9wdGlvbmFsXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHtDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1J9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQge0Nka092ZXJsYXlPcmlnaW59IGZyb20gXCJAYW5ndWxhci9jZGsvb3ZlcmxheVwiO1xyXG5pbXBvcnQge01hdEZvcm1GaWVsZH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGRcIjtcclxuLy9cclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyQ29tcG9uZW50fSBmcm9tIFwiLi4vY29tcG9uZW50cy9uZ3gtbWF0LXRpbWVwaWNrZXIvbmd4LW1hdC10aW1lcGlja2VyLmNvbXBvbmVudFwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJGb3JtYXRUeXBlfSBmcm9tIFwiLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci1mb3JtYXQudHlwZVwiO1xyXG5pbXBvcnQge05neE1hdFRpbWVwaWNrZXJBZGFwdGVyfSBmcm9tIFwiLi4vc2VydmljZXMvbmd4LW1hdC10aW1lcGlja2VyLWFkYXB0ZXJcIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1sb2NhbGUuc2VydmljZVwiO1xyXG4vL1xyXG5pbXBvcnQge1N1YmplY3QsIHRha2VVbnRpbH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHtEYXRlVGltZX0gZnJvbSBcInRzLWx1eG9uXCI7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiBcIltuZ3hNYXRUaW1lcGlja2VyXVwiLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IE5neE1hdFRpbWVwaWNrZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgICAgIG11bHRpOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgXSxcclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1ob3N0LW1ldGFkYXRhLXByb3BlcnR5XHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgXCJbZGlzYWJsZWRdXCI6IFwiZGlzYWJsZWRcIixcclxuICAgICAgICBcIihibHVyKVwiOiBcIm9uVG91Y2hlZCgpXCJcclxuICAgIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5neE1hdFRpbWVwaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudFJlZiAmJiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvcm1hdCgpOiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGZvcm1hdCh2YWx1ZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZm9ybWF0ID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIuaXNUd2VudHlGb3VyKCt2YWx1ZSBhcyBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSkgPyAyNCA6IDEyO1xyXG4gICAgICAgIGNvbnN0IGlzRHluYW1pY2FsbHlDaGFuZ2VkID0gdmFsdWUgJiYgKHRoaXMuX3ByZXZpb3VzRm9ybWF0ICYmIHRoaXMuX3ByZXZpb3VzRm9ybWF0ICE9PSB0aGlzLl9mb3JtYXQpO1xyXG5cclxuICAgICAgICBpZiAoaXNEeW5hbWljYWxseUNoYW5nZWQpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lcGlja2VyLnVwZGF0ZVRpbWUodGhpcy5fdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9wcmV2aW91c0Zvcm1hdCA9IHRoaXMuX2Zvcm1hdDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbWF4KCk6IHN0cmluZyB8IERhdGVUaW1lIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpXHJcbiAgICBzZXQgbWF4KHZhbHVlOiBzdHJpbmcgfCBEYXRlVGltZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF4ID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIucGFyc2VUaW1lKHZhbHVlLCB7bG9jYWxlOiB0aGlzLl9sb2NhbGUsIGZvcm1hdDogdGhpcy5mb3JtYXR9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbWF4ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG1pbigpOiBzdHJpbmcgfCBEYXRlVGltZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IG1pbih2YWx1ZTogc3RyaW5nIHwgRGF0ZVRpbWUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21pbiA9IE5neE1hdFRpbWVwaWNrZXJBZGFwdGVyLnBhcnNlVGltZSh2YWx1ZSwge2xvY2FsZTogdGhpcy5fbG9jYWxlLCBmb3JtYXQ6IHRoaXMuZm9ybWF0fSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX21pbiA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dChcIm5neE1hdFRpbWVwaWNrZXJcIilcclxuICAgIHNldCB0aW1lcGlja2VyKHBpY2tlcjogTmd4TWF0VGltZXBpY2tlckNvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuX3JlZ2lzdGVyVGltZXBpY2tlcihwaWNrZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICghdGhpcy5fdmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIudG9Mb2NhbGVUaW1lU3RyaW5nKHRoaXMuX3ZhbHVlLCB7Zm9ybWF0OiB0aGlzLmZvcm1hdCwgbG9jYWxlOiB0aGlzLl9sb2NhbGV9KTtcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gXCJcIjtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSW5wdXRWYWx1ZSgpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0aW1lID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIuZm9ybWF0VGltZSh2YWx1ZSwge2xvY2FsZTogdGhpcy5fbG9jYWxlLCBmb3JtYXQ6IHRoaXMuZm9ybWF0fSk7XHJcbiAgICAgICAgY29uc3QgaXNBdmFpbGFibGUgPSBOZ3hNYXRUaW1lcGlja2VyQWRhcHRlci5pc1RpbWVBdmFpbGFibGUoXHJcbiAgICAgICAgICAgIHRpbWUsXHJcbiAgICAgICAgICAgIHRoaXMuX21pbiBhcyBEYXRlVGltZSxcclxuICAgICAgICAgICAgdGhpcy5fbWF4IGFzIERhdGVUaW1lLFxyXG4gICAgICAgICAgICBcIm1pbnV0ZXNcIixcclxuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlci5taW51dGVzR2FwLFxyXG4gICAgICAgICAgICB0aGlzLl9mb3JtYXRcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoaXNBdmFpbGFibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB0aW1lO1xyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGVJbnB1dFZhbHVlKCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUud2FybihcIlNlbGVjdGVkIHRpbWUgZG9lc24ndCBtYXRjaCBtaW4gb3IgbWF4IHZhbHVlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0IF9kZWZhdWx0VGltZSh0aW1lOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl90aW1lcGlja2VyLmRlZmF1bHRUaW1lID0gTmd4TWF0VGltZXBpY2tlckFkYXB0ZXIuZm9ybWF0VGltZSh0aW1lLCB7XHJcbiAgICAgICAgICAgIGxvY2FsZTogdGhpcy5fbG9jYWxlLFxyXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuZm9ybWF0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgX2xvY2FsZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lcGlja2VyTG9jYWxlU3J2LmxvY2FsZTtcclxuICAgIH1cclxuXHJcbiAgICBASG9zdEJpbmRpbmcoXCJhdHRyLmNka092ZXJsYXlPcmlnaW5cIikgY2RrT3ZlcmxheU9yaWdpbjogQ2RrT3ZlcmxheU9yaWdpbiA9XHJcbiAgICAgICAgbmV3IENka092ZXJsYXlPcmlnaW4odGhpcy5fbWF0Rm9ybUZpZWxkID8gdGhpcy5fbWF0Rm9ybUZpZWxkLmdldENvbm5lY3RlZE92ZXJsYXlPcmlnaW4oKSA6IHRoaXMuX2VsZW1lbnRSZWYpO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZUNsaWNrOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgcHJpdmF0ZSBfZm9ybWF0OiBOZ3hNYXRUaW1lcGlja2VyRm9ybWF0VHlwZSA9IDEyO1xyXG4gICAgcHJpdmF0ZSBfbWF4OiBzdHJpbmcgfCBEYXRlVGltZTtcclxuICAgIHByaXZhdGUgX21pbjogc3RyaW5nIHwgRGF0ZVRpbWU7XHJcbiAgICBwcml2YXRlIF9wcmV2aW91c0Zvcm1hdDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfc3Vic0N0cmwkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcclxuICAgIHByaXZhdGUgX3RpbWVwaWNrZXI6IE5neE1hdFRpbWVwaWNrZXJDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIF92YWx1ZTogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9lbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBfdGltZXBpY2tlckxvY2FsZVNydjogTmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KE1hdEZvcm1GaWVsZCkgcHJpdmF0ZSBfbWF0Rm9ybUZpZWxkOiBNYXRGb3JtRmllbGQpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgY29uc3QgdkNoYW5nZXMgPSBjaGFuZ2VzW1widmFsdWVcIl07XHJcbiAgICAgICAgaWYgKHZDaGFuZ2VzICYmIHZDaGFuZ2VzLmN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0VGltZSA9IHZDaGFuZ2VzLmN1cnJlbnRWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5fdW5yZWdpc3RlclRpbWVwaWNrZXIoKTtcclxuICAgICAgICB0aGlzLl9zdWJzQ3RybCQubmV4dCgpO1xyXG4gICAgICAgIHRoaXMuX3N1YnNDdHJsJC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoXCJjbGlja1wiLCBbXCIkZXZlbnRcIl0pXHJcbiAgICBvbkNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVDbGljaykge1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lcGlja2VyLm9wZW4oKTtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVG91Y2hlZCA9ICgpID0+IHtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoXCJjaGFuZ2VcIiwgW1wiJGV2ZW50XCJdKVxyXG4gICAgdXBkYXRlVmFsdWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLl9vbkNoYW5nZSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0VGltZSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9vbkNoYW5nZTogKHZhbHVlOiBhbnkpID0+IHZvaWQgPSAoKSA9PiB7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVnaXN0ZXJUaW1lcGlja2VyKHBpY2tlcjogTmd4TWF0VGltZXBpY2tlckNvbXBvbmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChwaWNrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlciA9IHBpY2tlcjtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlci5yZWdpc3RlcklucHV0KHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lcGlja2VyLnRpbWVTZXRcclxuICAgICAgICAgICAgICAgIC5waXBlKHRha2VVbnRpbCh0aGlzLl9zdWJzQ3RybCQpKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgodGltZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0VGltZSA9IHRoaXMuX3ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZ3hNYXRUaW1lcGlja2VyQ29tcG9uZW50IGlzIG5vdCBkZWZpbmVkLlwiICtcclxuICAgICAgICAgICAgICAgIFwiIFBsZWFzZSBtYWtlIHN1cmUgeW91IHBhc3NlZCB0aGUgdGltZXBpY2tlciB0byBuZ3hNYXRUaW1lcGlja2VyIGRpcmVjdGl2ZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdW5yZWdpc3RlclRpbWVwaWNrZXIoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVwaWNrZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGltZXBpY2tlci51bnJlZ2lzdGVySW5wdXQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfdXBkYXRlSW5wdXRWYWx1ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIl19