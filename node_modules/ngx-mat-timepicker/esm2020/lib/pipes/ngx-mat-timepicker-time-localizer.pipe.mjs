import { Pipe } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerTimeLocalizerPipe {
    constructor(_timepickerLocaleSrv) {
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    transform(time, timeUnit, isKeyboardEnabled = false) {
        if (time == null || time === "") {
            return "";
        }
        switch (timeUnit) {
            case NgxMatTimepickerUnits.HOUR: {
                const format = (time === 0 || isKeyboardEnabled) ? "HH" : "H";
                return this._formatTime(NgxMatTimepickerMeasure.hour, time, format);
            }
            case NgxMatTimepickerUnits.MINUTE:
                return this._formatTime(NgxMatTimepickerMeasure.minute, time, "mm");
            default:
                throw new Error(`There is no Time Unit with type ${timeUnit}`);
        }
    }
    _formatTime(timeMeasure, time, format) {
        try {
            return DateTime.fromObject({ [timeMeasure]: +time }).setLocale(this._locale).toFormat(format);
        }
        catch {
            throw new Error(`Cannot format provided time - ${time} to locale - ${this._locale}`);
        }
    }
}
NgxMatTimepickerTimeLocalizerPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe });
NgxMatTimepickerTimeLocalizerPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, name: "timeLocalizer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerTimeLocalizerPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "timeLocalizer"
                }]
        }], ctorParameters: function () { return [{ type: i1.NgxMatTimepickerLocaleService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXRpbWUtbG9jYWxpemVyLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi9waXBlcy9uZ3gtbWF0LXRpbWVwaWNrZXItdGltZS1sb2NhbGl6ZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUVsRCxFQUFFO0FBQ0YsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDOUUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFDbkYsRUFBRTtBQUNGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxVQUFVLENBQUM7OztBQUtsQyxNQUFNLE9BQU8saUNBQWlDO0lBTTFDLFlBQW9CLG9CQUFtRDtRQUFuRCx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQStCO0lBQ3ZFLENBQUM7SUFMRCxJQUFZLE9BQU87UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztJQUtELFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQStCLEVBQUUsaUJBQWlCLEdBQUcsS0FBSztRQUN2RixJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLLEVBQUUsRUFBRTtZQUM3QixPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsUUFBUSxRQUFRLEVBQUU7WUFDZCxLQUFLLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM3QixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksS0FBSyxDQUFDLElBQUksaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7Z0JBRTlELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQ3ZFO1lBQ0QsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNO2dCQUM3QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN4RTtnQkFDSSxNQUFNLElBQUksS0FBSyxDQUFDLG1DQUFtQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxXQUFvQyxFQUFFLElBQXFCLEVBQUUsTUFBYztRQUMzRixJQUFJO1lBQ0EsT0FBTyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLElBQUksRUFBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDL0Y7UUFBQyxNQUFNO1lBQ0osTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDeEY7SUFDTCxDQUFDOzs4SEFqQ1EsaUNBQWlDOzRIQUFqQyxpQ0FBaUM7MkZBQWpDLGlDQUFpQztrQkFIN0MsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsZUFBZTtpQkFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlckxvY2FsZVNlcnZpY2V9IGZyb20gXCIuLi9zZXJ2aWNlcy9uZ3gtbWF0LXRpbWVwaWNrZXItbG9jYWxlLnNlcnZpY2VcIjtcclxuLy9cclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyVW5pdHN9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLXVuaXRzLmVudW1cIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZX0gZnJvbSBcIi4uL21vZGVscy9uZ3gtbWF0LXRpbWVwaWNrZXItbWVhc3VyZXMuZW51bVwiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lfSBmcm9tIFwidHMtbHV4b25cIjtcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6IFwidGltZUxvY2FsaXplclwiXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyVGltZUxvY2FsaXplclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBwcml2YXRlIGdldCBfbG9jYWxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVwaWNrZXJMb2NhbGVTcnYubG9jYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3RpbWVwaWNrZXJMb2NhbGVTcnY6IE5neE1hdFRpbWVwaWNrZXJMb2NhbGVTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKHRpbWU6IG51bWJlciB8IHN0cmluZywgdGltZVVuaXQ6IE5neE1hdFRpbWVwaWNrZXJVbml0cywgaXNLZXlib2FyZEVuYWJsZWQgPSBmYWxzZSk6IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCB8fCB0aW1lID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0aW1lVW5pdCkge1xyXG4gICAgICAgICAgICBjYXNlIE5neE1hdFRpbWVwaWNrZXJVbml0cy5IT1VSOiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSAodGltZSA9PT0gMCB8fCBpc0tleWJvYXJkRW5hYmxlZCkgPyBcIkhIXCIgOiBcIkhcIjtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0VGltZShOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5ob3VyLCB0aW1lLCBmb3JtYXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgTmd4TWF0VGltZXBpY2tlclVuaXRzLk1JTlVURTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRUaW1lKE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLm1pbnV0ZSwgdGltZSwgXCJtbVwiKTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gVGltZSBVbml0IHdpdGggdHlwZSAke3RpbWVVbml0fWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9mb3JtYXRUaW1lKHRpbWVNZWFzdXJlOiBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZSwgdGltZTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3Qoe1t0aW1lTWVhc3VyZV06ICt0aW1lfSkuc2V0TG9jYWxlKHRoaXMuX2xvY2FsZSkudG9Gb3JtYXQoZm9ybWF0KTtcclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZm9ybWF0IHByb3ZpZGVkIHRpbWUgLSAke3RpbWV9IHRvIGxvY2FsZSAtICR7dGhpcy5fbG9jYWxlfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=