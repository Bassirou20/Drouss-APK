import { Injectable, Pipe } from "@angular/core";
//
import { NgxMatTimepickerUnits } from "../models/ngx-mat-timepicker-units.enum";
import { NgxMatTimepickerMeasure } from "../models/ngx-mat-timepicker-measures.enum";
//
import { DateTime } from "ts-luxon";
import * as i0 from "@angular/core";
import * as i1 from "../services/ngx-mat-timepicker-locale.service";
export class NgxMatTimepickerParserPipe {
    constructor(_timepickerLocaleSrv) {
        this._timepickerLocaleSrv = _timepickerLocaleSrv;
        this._numberingSystem = DateTime.local().setLocale(this._locale).resolvedLocaleOptions().numberingSystem;
    }
    get _locale() {
        return this._timepickerLocaleSrv.locale;
    }
    transform(time, timeUnit = NgxMatTimepickerUnits.HOUR) {
        if (time == null || time === "") {
            return "";
        }
        if (!isNaN(+time)) {
            return `${time}`;
        }
        if (timeUnit === NgxMatTimepickerUnits.MINUTE) {
            return this._parseTime(time, "mm", NgxMatTimepickerMeasure.minute).toString();
        }
        return this._parseTime(time, "HH", NgxMatTimepickerMeasure.hour).toString();
    }
    _parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this._numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
}
NgxMatTimepickerParserPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerParserPipe, deps: [{ token: i1.NgxMatTimepickerLocaleService }], target: i0.ɵɵFactoryTarget.Pipe });
NgxMatTimepickerParserPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerParserPipe, name: "ngxMatTimepickerParser" });
NgxMatTimepickerParserPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerParserPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: NgxMatTimepickerParserPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: "ngxMatTimepickerParser"
                }]
        }, {
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.NgxMatTimepickerLocaleService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hdC10aW1lcGlja2VyL3NyYy9saWIvcGlwZXMvbmd4LW1hdC10aW1lcGlja2VyLXBhcnNlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxFQUFFO0FBQ0YsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0seUNBQXlDLENBQUM7QUFDOUUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sNENBQTRDLENBQUM7QUFFbkYsRUFBRTtBQUNGLE9BQU8sRUFBQyxRQUFRLEVBQWtCLE1BQU0sVUFBVSxDQUFDOzs7QUFNbkQsTUFBTSxPQUFPLDBCQUEwQjtJQVFuQyxZQUFvQixvQkFBbUQ7UUFBbkQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUErQjtRQUNuRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxlQUFrQyxDQUFDO0lBQ2hJLENBQUM7SUFSRCxJQUFZLE9BQU87UUFDZixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUM7SUFDNUMsQ0FBQztJQVFELFNBQVMsQ0FBQyxJQUFxQixFQUFFLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJO1FBQ2xFLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRSxFQUFFO1lBQzdCLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDZixPQUFPLEdBQUcsSUFBSSxFQUFFLENBQUM7U0FDcEI7UUFFRCxJQUFJLFFBQVEsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDakY7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBRU8sVUFBVSxDQUFDLElBQXFCLEVBQUUsTUFBYyxFQUFFLFdBQW9DO1FBQzFGLE1BQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3BILElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDcEIsT0FBTyxVQUFVLENBQUM7U0FDckI7UUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ25ELENBQUM7O3VIQW5DUSwwQkFBMEI7cUhBQTFCLDBCQUEwQjsySEFBMUIsMEJBQTBCOzJGQUExQiwwQkFBMEI7a0JBSnRDLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLHdCQUF3QjtpQkFDakM7O2tCQUNBLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGUsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbi8vXHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlclVuaXRzfSBmcm9tIFwiLi4vbW9kZWxzL25neC1tYXQtdGltZXBpY2tlci11bml0cy5lbnVtXCI7XHJcbmltcG9ydCB7Tmd4TWF0VGltZXBpY2tlck1lYXN1cmV9IGZyb20gXCIuLi9tb2RlbHMvbmd4LW1hdC10aW1lcGlja2VyLW1lYXN1cmVzLmVudW1cIjtcclxuaW1wb3J0IHtOZ3hNYXRUaW1lcGlja2VyTG9jYWxlU2VydmljZX0gZnJvbSBcIi4uL3NlcnZpY2VzL25neC1tYXQtdGltZXBpY2tlci1sb2NhbGUuc2VydmljZVwiO1xyXG4vL1xyXG5pbXBvcnQge0RhdGVUaW1lLCBOdW1iZXJpbmdTeXN0ZW19IGZyb20gXCJ0cy1sdXhvblwiO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogXCJuZ3hNYXRUaW1lcGlja2VyUGFyc2VyXCJcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTmd4TWF0VGltZXBpY2tlclBhcnNlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBwcml2YXRlIGdldCBfbG9jYWxlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVwaWNrZXJMb2NhbGVTcnYubG9jYWxlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX251bWJlcmluZ1N5c3RlbTogTnVtYmVyaW5nU3lzdGVtO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3RpbWVwaWNrZXJMb2NhbGVTcnY6IE5neE1hdFRpbWVwaWNrZXJMb2NhbGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgdGhpcy5fbnVtYmVyaW5nU3lzdGVtID0gRGF0ZVRpbWUubG9jYWwoKS5zZXRMb2NhbGUodGhpcy5fbG9jYWxlKS5yZXNvbHZlZExvY2FsZU9wdGlvbnMoKS5udW1iZXJpbmdTeXN0ZW0gYXMgTnVtYmVyaW5nU3lzdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIHRpbWVVbml0ID0gTmd4TWF0VGltZXBpY2tlclVuaXRzLkhPVVIpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aW1lID09IG51bGwgfHwgdGltZSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaXNOYU4oK3RpbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgJHt0aW1lfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGltZVVuaXQgPT09IE5neE1hdFRpbWVwaWNrZXJVbml0cy5NSU5VVEUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcnNlVGltZSh0aW1lLCBcIm1tXCIsIE5neE1hdFRpbWVwaWNrZXJNZWFzdXJlLm1pbnV0ZSkudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLl9wYXJzZVRpbWUodGltZSwgXCJISFwiLCBOZ3hNYXRUaW1lcGlja2VyTWVhc3VyZS5ob3VyKS50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3BhcnNlVGltZSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIGZvcm1hdDogc3RyaW5nLCB0aW1lTWVhc3VyZTogTmd4TWF0VGltZXBpY2tlck1lYXN1cmUpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZFRpbWUgPSBEYXRlVGltZS5mcm9tRm9ybWF0KFN0cmluZyh0aW1lKSwgZm9ybWF0LCB7bnVtYmVyaW5nU3lzdGVtOiB0aGlzLl9udW1iZXJpbmdTeXN0ZW19KVt0aW1lTWVhc3VyZV07XHJcbiAgICAgICAgaWYgKCFpc05hTihwYXJzZWRUaW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkVGltZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHBhcnNlIHRpbWUgLSAke3RpbWV9YCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==