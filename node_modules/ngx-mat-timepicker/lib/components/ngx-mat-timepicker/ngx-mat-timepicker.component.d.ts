import { EventEmitter, TemplateRef } from "@angular/core";
import { CdkOverlayOrigin, ConnectedPosition, Overlay } from "@angular/cdk/overlay";
import { MatDialog } from "@angular/material/dialog";
import { ThemePalette } from "@angular/material/core";
import { NgxMatTimepickerFormatType } from "../../models/ngx-mat-timepicker-format.type";
import { NgxMatTimepickerEventService } from "../../services/ngx-mat-timepicker-event.service";
import { NgxMatTimepickerDirective } from "../../directives/ngx-mat-timepicker.directive";
import { NgxMatTimepickerRef } from "../../models/ngx-mat-timepicker-ref.interface";
import { DateTime } from "ts-luxon";
import { BehaviorSubject } from "rxjs";
import * as i0 from "@angular/core";
export declare class NgxMatTimepickerComponent implements NgxMatTimepickerRef {
    private _eventService;
    private _dialog;
    private _overlay;
    static nextId: number;
    set appendToInput(newValue: boolean | string | void);
    set color(newValue: ThemePalette);
    get color(): ThemePalette;
    get disabled(): boolean;
    set enableKeyboardInput(newValue: boolean | string | void);
    get enableKeyboardInput(): boolean;
    get format(): NgxMatTimepickerFormatType;
    set format(value: NgxMatTimepickerFormatType);
    get inputElement(): HTMLElement;
    get maxTime(): DateTime;
    get minTime(): DateTime;
    get minutesGap(): number;
    set minutesGap(gap: number);
    get overlayOrigin(): CdkOverlayOrigin;
    get time(): string;
    cancelBtnTmpl: TemplateRef<Node>;
    closed: EventEmitter<void>;
    confirmBtnTmpl: TemplateRef<Node>;
    defaultTime: string;
    disableAnimation: boolean;
    editableHintTmpl: TemplateRef<Node>;
    hourSelected: EventEmitter<number>;
    hoursOnly: boolean;
    id: string;
    isEsc: boolean;
    max: DateTime;
    min: DateTime;
    opened: EventEmitter<void>;
    overlayPositions: ConnectedPosition[];
    preventOverlayClick: boolean;
    showPicker: boolean;
    timeChanged: EventEmitter<string>;
    timepickerClass: string;
    timeSet: EventEmitter<string>;
    timeUpdated: BehaviorSubject<string>;
    private _appendToInput;
    private _color;
    private _dialogRef;
    private _enableKeyboardInput;
    private _format;
    private _minutesGap;
    private _overlayRef;
    private _timepickerInput;
    constructor(_eventService: NgxMatTimepickerEventService, _dialog: MatDialog, _overlay: Overlay);
    close(): void;
    open(): void;
    /***
     * Register an input with this timepicker.
     * input - The timepicker input to register with this timepicker
     */
    registerInput(input: NgxMatTimepickerDirective): void;
    unregisterInput(): void;
    updateTime(time: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxMatTimepickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxMatTimepickerComponent, "ngx-mat-timepicker", never, { "appendToInput": "appendToInput"; "color": "color"; "enableKeyboardInput": "enableKeyboardInput"; "format": "format"; "minutesGap": "minutesGap"; "cancelBtnTmpl": "cancelBtnTmpl"; "confirmBtnTmpl": "confirmBtnTmpl"; "defaultTime": "defaultTime"; "disableAnimation": "disableAnimation"; "editableHintTmpl": "editableHintTmpl"; "hoursOnly": "hoursOnly"; "isEsc": "isEsc"; "max": "max"; "min": "min"; "preventOverlayClick": "preventOverlayClick"; "timepickerClass": "timepickerClass"; }, { "closed": "closed"; "hourSelected": "hourSelected"; "opened": "opened"; "timeChanged": "timeChanged"; "timeSet": "timeSet"; }, never, never, false, never>;
}
